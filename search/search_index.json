{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MajorDom Documentation","text":"<p>Info</p> <p>MajorDom's public documentation is still in progress and will be available soon after the Kickstarter campaign. Meanwhile, you can get more information about MajorDom at majordom.io. Don't forget to subscribe to our newsletter to get notified about status of the project, kickstarter campaign, documentation release and more.</p>"},{"location":"architecture/","title":"Architecture Overview","text":"<p>MajorDom consists of several key components: devices, hub, cloud, bridge, mobile application, and voice assistant.</p> <p>Devices play a crucial role in the system as they enable control over physical parts of the home. They communicate using radio modules and the \u201cMerlin\u201d protocol that receive commands from the hub, and transmit events back to it.</p> <p>The hub is the central element of the system. It manages the devices and coordinates their operations. The hub holds the main database with information about users, home, rooms, and devices. Through a local HTTP server and WS server, the hub provides an API for interacting with the database and for high-level control of devices.</p> <p>The cloud is the server-side component and plays a vital role in user authentication. It stores the database of users, homes, hubs, and their access rights. Device models with a list of parameters and a firmware update system are also stored in the cloud.</p> <p>The bridge is a WS server that provides communication between the hub and remote user over the internet. It enables sending commands and receiving information from the hub without being within the home's local network.</p> <p>The system can have multiple bridges located in different places. Clients select the nearest or least loaded bridge to minimize communication delays.</p> <p>One of the main features of the MajorDom is its fault tolerance. Despite the collapse of one or multiple bridges, the system perseveres and maintains its functionality. The remaining available bridges take on the tasks of the inactive bridges, ensuring uninterrupted data exchange between the hub and clients.</p> <p>Even a complete loss of internet connection on the hub is not a problem. All the logic and command processing occur locally, ensuring independence from the internet connection and maintaining the ability to control devices within the local network. However, such scenarios are rare since the hub can be simultaneously connected via Wi-Fi and an Ethernet cable, and future support for cellular network will be added.</p> <p>Smart home control is achieved through a mobile application that provides a user-friendly interface. However, in practice, the role of the mobile application often reduces to system configuration, while day-to-day device management is carried out using automatic scenarios and the voice assistant.</p> <p>Like the hub, the voice assistant can work completely offline, ensuring security, privacy, and reliability of use.</p>"},{"location":"custom-device/","title":"Custom Device","text":""},{"location":"custom-device/#create-a-custom-device-model","title":"Create a Custom Device Model","text":"<ol> <li>Open the MajorDom mobile app.</li> <li>Navigate to <code>Settings</code> and enable <code>Developers Mode</code>.</li> <li>Return to the home screen and tap the <code>+</code> button located in the top-right corner.</li> <li>Alongside the existing options \"Create a Room\" and \"Add a Device\", a new option, \"Create a Device Model\", will now be available.</li> <li>Choose <code>Create a Device Model</code>.</li> <li>Provide a name for your custom device model and define a set of parameters. Custom parameters can also be added.</li> <li>After creation, the device model and its parameters will be stored on the Hub.</li> <li>You can now use this custom device model with new devices in your home by specifying the device model UUID in the sketch and implementing parameter handling.</li> </ol>"},{"location":"custom-device/#write-device-sketch","title":"Write Device Sketch","text":""},{"location":"custom-device/#using-merlin-framework","title":"Using Merlin Framework","text":""},{"location":"custom-device/#merlin24-c","title":"Merlin24 C++","text":"<p>Merlin24 works with low-power, long-range nrf24l01 radio modules operating on the 2.4GHz band.</p> <p>Here's an example sketch for controlling a relay:</p> <pre><code>#include &lt;Merlin24.h&gt;\n// Define pin numbers\n#define RELAY_PIN 3\n#define BUTTON_PIN 4\n// Variables to store the state\nbyte relay_state = LOW;\nbyte last_button_state = HIGH; // Assuming pull-up\n// Define constants for function codes\n#define RELAY_PARAMETER 1\n// Initialize Merlin24 object with device model uuid and parameter value handler function\nMerlin24 device(\"10359220-c504-40d0-bed7-f254cc85e75c\", [](byte parameter_index, byte value) {\nswitch (parameter_index) {\ncase RELAY_PARAMETER:\n// toggle the relay and save new state\nrelay_state = value;\ndigitalWrite(RELAY_PIN, value);\nbreak;\n// You can add more cases here for other parameters\ndefault:\nbreak; // Handle unknown function code here (optional)\n}\n});\nvoid setup() {\npinMode(RELAY_PIN, OUTPUT);\npinMode(BUTTON_PIN, INPUT_PULLUP);\n}\nvoid loop() {\n/*\n        tick() is required for Merlin24 to work\n        it should be called as often as possible\n        avoid delays and other blocking code\n    */\ndevice.tick();\n/* \n        Toggle the relay on the button press\n        Just an example, in real life you would probably want to debounce the button\n    */\n// Read the button state\nbyte current_button_state = digitalRead(BUTTON_PIN);\n// Check for button press (LOW when pressed because of pull-up resistor)\nif (last_button_state == HIGH &amp;&amp; current_button_state == LOW) {\n// Toggle the relay, save the state and send it to hub\ndigitalWrite(RELAY_PIN, relay_state);\nrelay_state = !relay_state;\ndevice.send(RELAY_PARAMETER, relay_state);\n}\n// Update last button state\nlast_button_state = current_button_state;\n}\n</code></pre>"},{"location":"custom-device/#merlinwifi-merlinhttp-c","title":"MerlinWiFi (MerlinHttp) C++","text":"<p>The <code>MerlinHttp</code> class provides a way to connect your device to a hub over HTTP, making it a great choice for devices that require internet access or advanced capabilities. It is particularly suitable for ESP32/ESP8266 boards.</p> <p>To switch from <code>Merlin24</code> to <code>MerlinHttp</code>, all you need to do is change the included header and initialize <code>MerlinHttp</code> instead. In most cases, this should be sufficient.</p> <pre><code>#include &lt;MerlinHttp.h&gt;\n// ... (other parts remain unchanged)\nMerlinHttp device(\"10359220-c504-40d0-bed7-f254cc85e75c\", [](byte parameter_index, byte value) {\n// ... (other parts remain unchanged)\n</code></pre>"},{"location":"custom-device/#manually-merlinhttp-protocol-overview","title":"Manually (MerlinHttp Protocol Overview)","text":"<p>If you want to use other technologies, hardware, or software\u2014e.g., a Raspberry Pi with a Python program and FastAPI server\u2014you can still communicate with the Hub over HTTP by implementing the required endpoints manually. Below is an overview of how the Hub-to-Device and Device-to-Hub communication occurs.</p>"},{"location":"custom-device/#hub-to-device-communication","title":"Hub-to-Device Communication","text":"<p>Your device should host an HTTP server and expose the following RESTful API endpoints:</p> <p><code>GET /api/v1/merlin</code>: Used by the Hub to get current device state Reponse Payload: <pre><code>[\n{\n\"index\": \"&lt;parameter_index: int in 0...255&gt;\",\n\"value\": \"&lt;parameter_value: base64 encoded value&gt;\"\n},\n]\n</code></pre></p> <p><code>POST /api/v1/merlin</code>: Used by the Hub to send parameter updates to the device.</p> <p>Request Payload: <pre><code>{\n\"index\": \"&lt;parameter_index: int in 0...255&gt;\",\n\"value\": \"&lt;parameter_value: base64 encoded value&gt;\"\n}\n</code></pre></p> <p><code>POST /api/v1/credentials</code>: Used by the Hub to send network and authentication credentials to the device on initial setup.</p> <p>Request Payload: <pre><code>{\n\"ssid\": \"&lt;Wi-Fi SSID&gt;\",\n\"psk\": \"&lt;Wi-Fi Password&gt;\",\n\"hub_host\": \"&lt;Hub Host Address&gt;\",\n\"token\": \"&lt;JWT Token&gt;\"\n}\n</code></pre></p>"},{"location":"custom-device/#device-to-hub-communication","title":"Device-to-Hub Communication","text":"<p>To communicate with the Hub, the device should make HTTP requests to the Hub's  API endpoints:</p> <p>Send Parameter Updates: <code>{hub_host}/api/merlin/state</code></p> <p>Request Payload: <pre><code>{\n\"index\": \"&lt;parameter_index: int in 0...255&gt;\",\n\"value\": \"&lt;parameter_value: base64 encoded value&gt;\"\n}\n</code></pre></p> <p>Update Device Host (ip:port) Address: <code>{hub_host}/api/merlin/host</code></p> <p>Request Payload: <pre><code>{\n\"host\": \"&lt;device_host_address&gt;\"\n}\n</code></pre></p>"},{"location":"custom-device/#authorization","title":"Authorization","text":"<p>Authentication is implemented using a long-lived JWT token included in the <code>Authorization</code> header of each HTTP request:</p> <pre><code>\"Authorization\": \"Bearer &lt;JWT Token&gt;\"\n</code></pre>"},{"location":"custom-device/#discovery","title":"Discovery","text":"<p>To make a device discoverable, setup zeroconf service of type <code>_majordom-device._tcp</code> and specify the port of the merlin interface server. Now Hub can find the device in your LAN.</p>"},{"location":"custom-device/#parameter-value-types","title":"Parameter (Value) Types","text":"<p>Current available types:</p> <pre><code>class ParameterType(str, Enum):\n# Base types\ninteger = \"integer\"  # uint8\ndecimal = \"decimal\"  # uint8 casting from [0, 255] to [0, 1]\nboolean = \"boolean\"  # real one-bit integer\nenum = \"enum\"        # uint8 with string_representation\nstring = \"string\"    # string\nhumidity = \"humidity\"          # decimal;\ntemperature = \"temperature\"    # float8;\ncolor_temperature = \"color_temperature\"  # Kelvin, decimal; 0.5 is white\nrgb = \"rgb\"                    # hue wheel angle, decimal; TODO: uint8[3];\nvolume = \"volume\"              # decimal;\ntimeinterval = \"timeinterval\"  # seconds, int32;\nbutton = \"button\"              # None, just a button\n</code></pre> <p>Example of decoding:</p> <pre><code>class DeviceParameter(Parameter): # pydantic.BaseModel\nvalue: bytes\nclass Config:\njson_encoders = {\nbytes: lambda v: base64.b64encode(v).decode()\n}\n@validator('value', pre=True)\ndef base64_decode(cls, value: str) -&gt; bytes:\nif value is not None and isinstance(value, str):\nreturn base64.b64decode(value)\nreturn value\n@property\ndef decoded_value(self) -&gt; int | float | bool | str | bytes:\nmatch self.value_type:\ncase ParameterType.integer | ParameterType.enum:\nreturn max(0, min(int.from_bytes(self.value, 'big'), 255)) # int as uint8 in [0, 255]\ncase ParameterType.timeinterval:\nreturn int.from_bytes(self.value, 'big') # just int\ncase ParameterType.decimal | ParameterType.humidity | ParameterType.temperature | ParameterType.color_temperature | ParameterType.rgb | ParameterType.volume:\nreturn max(0, min(int.from_bytes(self.value, 'big'), 255)) / 255 # float in [0, 1] mapped from uint8 in [0, 255]\ncase ParameterType.boolean:\nreturn bool(self.value[0])\ncase ParameterType.string:\nreturn self.value.decode('utf-8') # utf-8 is default but explicit is better than implicit\ncase ParameterType.button:\nreturn b'\\x00'\ncase _:\nreturn self.value\n</code></pre>"},{"location":"api/bridge/","title":"Bridge API","text":""},{"location":"api/bridge/#open-full-page","title":"Open Full Page","text":""},{"location":"api/cloud/","title":"Cloud API","text":""},{"location":"api/cloud/#open-full-page","title":"Open Full Page","text":""},{"location":"api/hub/","title":"Hub API","text":""},{"location":"api/hub/#open-full-page","title":"Open Full Page","text":""},{"location":"api/dev/","title":"Index","text":""},{"location":"api/dev/#cloud","title":"Cloud","text":""},{"location":"api/dev/#bridge","title":"Bridge","text":""},{"location":"api/dev/#hub","title":"Hub","text":""},{"location":"api/dev/bridge/","title":"Bridge","text":""},{"location":"api/dev/bridge/#open-full-page","title":"Open Full Page","text":""},{"location":"api/dev/cloud/","title":"Cloud","text":""},{"location":"api/dev/cloud/#open-full-page","title":"Open Full Page","text":""},{"location":"api/dev/hub/","title":"Hub","text":""},{"location":"api/dev/hub/#open-full-page","title":"Open Full Page","text":""},{"location":"hub-development/how-to-start/","title":"How to Start","text":""},{"location":"hub-development/how-to-start/#usage","title":"Usage","text":"<p>Flash ready image from releases page to a SD card (or MMC/eMMC/SSD).</p>"},{"location":"hub-development/how-to-start/#develop-locally","title":"Develop Locally","text":""},{"location":"hub-development/how-to-start/#setup","title":"Setup","text":"<p>Clone the repo and cd to it</p> <p>Install dependencies <pre><code>pip install poetry poetry install\n</code></pre></p> <p>Generate token signing keys <pre><code>ssh-keygen -t rsa -b 4096 -m PEM -f cloud.key -N \"\"\nopenssl rsa -in cloud.key -pubout -outform PEM -out cloud.key.pub\nssh-keygen -t rsa -b 4096 -m PEM -f hub.key -N \"\"\nopenssl rsa -in hub.key -pubout -outform PEM -out hub.key.pub\n</code></pre></p> <p>Prepare .env <pre><code>cp example.env .env\n</code></pre></p> <p>Read CLI options <pre><code>poetry run python3 majordom_hub --help\n</code></pre></p> <p>Run <pre><code>poetry run python3 majordom_hub --virtual </code></pre></p>"},{"location":"hub-development/repo-architecture/","title":"Repo Architecture","text":""},{"location":"hub-development/repo-architecture/#coordinator","title":"Coordinator","text":"<p>The <code>coordinator.py</code> module provides the <code>Coordinator</code> class, which centralizes the management of various services and controllers. It takes charge of initializing services, dependency injection, setting up initial states, and facilitating communication between different services and controllers.</p>"},{"location":"hub-development/repo-architecture/#controllers","title":"Controllers","text":""},{"location":"hub-development/repo-architecture/#abstractcontroller","title":"AbstractController","text":"<p>This is a generic abstract class that serves as an adapter between high-level actions from applications and low-level actions for exact connection type (like radio modules, IR, etc.). If you want to add a new connection type, you need to implement this class.</p>"},{"location":"hub-development/repo-architecture/#merlin24controller","title":"Merlin24Controller","text":"<p>Implementation of AbstractController for Merlin24 radio protocol.</p>"},{"location":"hub-development/repo-architecture/#merlinhttpcontroller","title":"MerlinHttpController","text":"<p>Implementation of Merlin protocol via http.</p>"},{"location":"hub-development/repo-architecture/#managers","title":"Managers","text":"<p>Mainly database CRUD for each model.</p>"},{"location":"hub-development/repo-architecture/#models","title":"Models","text":"<p>Database models (tables).</p>"},{"location":"hub-development/repo-architecture/#schemas","title":"Schemas","text":"<p>Data types for internal usage and API.</p>"},{"location":"hub-development/repo-architecture/#server","title":"Server","text":"<p>FastAPI endpoints.</p>"},{"location":"hub-development/repo-architecture/#services","title":"Services","text":"<p>Subprograms running continuously in parallel daemon threads.</p>"},{"location":"hub-development/repo-architecture/#device-relay","title":"Device Relay","text":"<p>A service that handles the relay of information between higher-level applications to device controllers with different connection types and vice-versa.</p>"},{"location":"hub-development/repo-architecture/#client","title":"Client","text":"<p>Mainly manages websocket connection, sends and handles messages. Also can fetch data from cloud.</p>"},{"location":"hub-development/repo-architecture/#live-display","title":"Live Display","text":"<p>Rich live display table, cli alternative to gpio status leds. Note: other logs may disappear.</p>"},{"location":"hub-development/repo-architecture/#merlin24","title":"Merlin24","text":"<p>Low-level listening and sending messages via merlin24 radio protocol.</p>"},{"location":"hub-development/repo-architecture/#gpio","title":"GPIO","text":"<p>Buttons and leds.</p>"},{"location":"hub-development/repo-architecture/#domain","title":"Domain","text":"<p>All other stuff.</p>"}]}